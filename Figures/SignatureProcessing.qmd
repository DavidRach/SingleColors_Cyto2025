---
title: "Signature Processing With Luciernaga"
format: html
---

Specify plot storage location

```{r}
StorageLocation <- file.path("Figures", "Figure_SignatureProcessing")
```

# Setup

Load required packages via the library call 

```{r}
library(dplyr)
library(flowCore)
library(flowWorkspace)
library(openCyto)
library(Luciernaga)
```

Provide a openCyto gating template
```{r}
FileLocation <- system.file("extdata", package = "Luciernaga")
MyGates <- data.table::fread(file.path(path = FileLocation, pattern = 'Gates.csv'))

removestrings <-  c("(Cells)", ".fcs", " ")
```

Locate the fcs files
```{r}
File_Location <- "/home/david/Desktop/data2"
FCS_Pattern <- ".fcs$"
FCS_Files <- list.files(path = File_Location, pattern = FCS_Pattern,
                        full.names = TRUE, recursive = FALSE)

SingleColor <- FCS_Files[grep("CD38", FCS_Files)]
Unstained <- FCS_Files[grep("Unstained", FCS_Files)]
```

Load Unstained into GatingSet (for simplicity kept separate), gate and plot

```{r}
UnstainedCytoSet <- load_cytoset_from_fcs(Unstained, 
                                   truncate_max_range = FALSE, 
                                   transform = FALSE)
UnstainedGatingSet <- GatingSet(UnstainedCytoSet)

MyGatingTemplate <- gatingTemplate(MyGates)
gt_gating(MyGatingTemplate, UnstainedGatingSet)


UnstainedPlot <- Utility_GatingPlots(x=UnstainedGatingSet, 
                                      sample.name = "GUID", 
                                      removestrings = removestrings, 
                                      gtFile = MyGates, 
                                      DesiredGates = NULL, 
                                      outpath = StorageLocation, 
                                      returnType="patchwork")

UnstainedPlot
```

Load SingleColors into a Gating set (for simplicity kept separate), gate and plot
```{r}
SingleColorCytoSet <- load_cytoset_from_fcs(SingleColor, 
                                   truncate_max_range = FALSE, 
                                   transform = FALSE)
SingleColorGatingSet <- GatingSet(SingleColorCytoSet)

MyGatingTemplate <- gatingTemplate(MyGates)
gt_gating(MyGatingTemplate, SingleColorGatingSet)

SingleColorPlot <- Utility_GatingPlots(x=SingleColorGatingSet, 
                                      sample.name = "GUID", 
                                      removestrings = removestrings, 
                                      gtFile = MyGates, 
                                      DesiredGates = NULL, 
                                      outpath = StorageLocation, 
                                      returnType="patchwork")

SingleColorPlot
```

```{r}
plot(SingleColorGatingSet)
```

# Unstained Population Signature 

```{r}
PopulationInterest <- gs_pop_get_data(UnstainedGatingSet, subset="lymphocytes")
TheDataValues <- exprs(PopulationInterest[[1]])
TheDataValues <- data.frame(TheDataValues, check.names=FALSE)
TheSummary <- AveragedSignature(x=TheDataValues, stats="median")
TheData <- TheSummary[,-grep("Time|FS|SC|SS|Original|W$|H$", names(TheSummary))]
TheData <- TheData %>% mutate(Sample="Autofluorescence") %>% relocate(Sample, .before=1)
RawMFIPlot <- Luciernaga::QC_ViewSignature(x="Autofluorescence", data=TheData, Normalize=FALSE, plotlinecolor="blue")
RawMFIPlot
```

```{r}
NormalizedPlot <- Luciernaga::QC_ViewSignature(x="Autofluorescence",
 data=TheData, Normalize=TRUE,plotlinecolor="darkgreen")
NormalizedPlot
```

Provide a conflict resolution for fluorophores whose primary detectors directly overlap with main detector of the different autofluorescences

```{r}
FileLocation <- system.file("extdata", package = "Luciernaga")
pattern = "AutofluorescentOverlaps.csv"
AFOverlap <- list.files(path=FileLocation, pattern=pattern,
                        full.names = TRUE)
AFOverlap_CSV <- read.csv(AFOverlap, check.names = FALSE)
AFOverlap_CSV
```

Return the general autofluorescence input for subtraction from single colors (if desired)

```{r}
removestrings <- ".fcs"

UnstainedSignatureInput <- Luciernaga_QC(x=UnstainedGatingSet,
                                    subsets="lymphocytes", 
                                    removestrings=removestrings,
                                    sample.name="GUID",
                                    unmixingcontroltype = "cells",
                                    Unstained = TRUE, 
                                    ratiopopcutoff = 0.001,
                                    Verbose = TRUE,
                                    AFOverlap = AFOverlap,
                                    stats = "median",
                                    ExportType = "data.frame",
                                    SignatureReturnNow = TRUE,
                                    outpath = NULL)
```

```{r}
RawSlices <- Luciernaga_LinearSlices(x=UnstainedGatingSet, subset="lymphocytes",
                                  sample.name="GUID", removestrings=removestrings,
                                  stats="median", returntype="raw",
                                  probsratio=0.1, output="plot", desiredAF="V7-A",
                                  titlename="Unstained")

RawSlices
#plotly::ggplotly(RawSlices)
```


```{r}
NormalizedSlices <- Luciernaga_LinearSlices(x=UnstainedGatingSet, subset="lymphocytes",
                                  sample.name="GUID", removestrings=removestrings,
                                  stats="median", returntype="normalized",
                                  probsratio=0.1, output="plot", desiredAF="V7-A",
                                  titlename="Unstained (Normalized)")

NormalizedSlices
#plotly::ggplotly(NormalizedSlices)
```

# Single Color
```{r}
Cutplot <- Luciernaga_LinearSlices(x=SingleColorGatingSet, subset="lymphocytes",
                                  sample.name="GUID", removestrings=removestrings,
                                  stats="median", returntype="raw",
                                  probsratio=0.1, output="plot", desiredAF="R8-A",
                                  titlename = "APC-Fire 810", returncutplot = TRUE)

Cutplot
```


```{r}
RawSlices <- Luciernaga_LinearSlices(x=SingleColorGatingSet, subset="lymphocytes",
                                  sample.name="GUID", removestrings=removestrings,
                                  stats="median", returntype="raw",
                                  probsratio=0.1, output="plot", desiredAF="R8-A",
                                  titlename = "APC-Fire 810")

plotly::ggplotly(RawSlices)
```

```{r}
NormalizedSlices <- Luciernaga_LinearSlices(x=SingleColorGatingSet,
 subset="lymphocytes", sample.name="GUID", removestrings=removestrings,
 stats="median", returntype="normalized", probsratio=0.1, output="plot",
 desiredAF="R8-A", titlename = "APC-Fire 810 (Normalized)")

plotly::ggplotly(NormalizedSlices)
```

```{r}
NormalizedSliceData <- Luciernaga_LinearSlices(x=SingleColorGatingSet,
    subset="lymphocytes", sample.name="GUID", removestrings=removestrings,
    stats="median", returntype="normalized", probsratio=0.1, output="data", desiredAF="R8-A")

APCFire810_90to100 <- NormalizedSliceData |> rename(Sample = Percentiles) |>
     dplyr::filter(Sample %in% "90")
APCFire810_10to20 <- NormalizedSliceData |> rename(Sample = Percentiles) |>
     dplyr::filter(Sample %in% "10")
```

```{r}
NormalizedSliceData <- NormalizedSliceData |> arrange(Percentiles)

CosineData <- Luciernaga_Cosine(data=NormalizedSliceData,
 returntype="data", rearrange=FALSE)

CosineData

CosinePlot <- Luciernaga_Cosine(data=NormalizedSliceData,
 returntype="plot", rearrange=FALSE, limitlow=0.8, limithigh=1,
 colorlow="orange", colorhigh="orangered", legend=TRUE)

CosinePlot
```

Similarity to other fluorophore signatures by cosine value

```{r}
MatchingSignature <- QC_WhatsThis(x="90", data=APCFire810_90to100,
 NumberHits = 6, returnPlots = TRUE)
MatchingSignature[1]
```

```{r}
plotly::ggplotly(MatchingSignature[[2]])
```

```{r}
ContaminationSignature <- QC_WhatsThis(x="10", data=APCFire810_10to20,
 NumberHits = 6, returnPlots = TRUE)
ContaminationSignature[1]
```

# Amalgamated Signature

```{r}
Amalgamated <- NormalizedSliceData |> mutate(Count=1) |> relocate(Count, .after=Percentiles)

Plot <- QC_Amalgamate(data=Amalgamated, samplecolumn="Percentiles",
 countcolumn="Count", returnType="plot", titlename=NULL, linecolor="blue", legend=FALSE)

plotly::ggplotly(Plot)
```

# Hotspot Spreading

```{r}
MyPanel <- c("BUV395", "BUV563", "BUV615", "BUV661", "BUV737", "BUV805",
"Pacific Blue", "BV480","BV570", "BV605", "BV650", "BV711", "BV750", "BV786",
"Alexa Fluor 488", "Spark Blue 550", "Spark Blue 574", "RB613", "RB705", "RB780",
"PE", "PE-Dazzle 594", "PE-Cy5", "PE-Fire 700", "PE-Fire 744", "PE-Vio 770", "APC", "Alexa Fluor 647", "Zombie NIR", "APC-R700", "APC-Fire 750", "APC-Fire 810")

HotspotBasePlot <- Luciernaga:::MagesCauldron(panelfluors=MyPanel, unstained=UnstainedSignatureInput)

Brightest <- APCFire810_90to100 |> select(-Sample)
Dimmest <- APCFire810_10to20 |> select(-Sample)

#QC_ReferenceLibrary(FluorNameContains="APC-Fire 810", NumberDetectors = 64)

HotspotBrightest <- Luciernaga:::MagesCauldron(panelfluors=MyPanel,
     unstained=UnstainedSignatureInput, swapname="APC-Fire 810",
     swapvalue=Brightest, returnType="data", outpath=StorageLocation,
     savePlot=TRUE, filename="BrightHotspot")

HotspotDimmest <- Luciernaga:::MagesCauldron(panelfluors=MyPanel,
     unstained=UnstainedSignatureInput, swapname="APC-Fire 810",
     swapvalue=Dimmest, returnType="data", savePlot=TRUE, 
     outpath=StorageLocation, filename="DimHotspot")

Difference <- Luciernaga:::TailOfANewt(HotspotBrighter=HotspotBrightest,
 HotspotDimmer=HotspotDimmest,
 savePlot=TRUE, filename="HotspotDifference",
 outpath=StorageLocation)

 HotspotBrightest <- Luciernaga:::MagesCauldron(panelfluors=MyPanel,
     unstained=UnstainedSignatureInput, swapname="APC-Fire 810",
     swapvalue=Brightest, returnType="plot", outpath=StorageLocation,
     savePlot=TRUE, filename="BrightHotspot")

HotspotDimmest <- Luciernaga:::MagesCauldron(panelfluors=MyPanel,
     unstained=UnstainedSignatureInput, swapname="APC-Fire 810",
     swapvalue=Dimmest, returnType="plot", savePlot=TRUE, 
     outpath=StorageLocation, filename="DimHotspot")
```

```{r}
print("Goodbye")
```